/**
 * NOTE: This class is auto generated by the swagger code generator program (1.0.14).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package co.com.investment.cryptocurrency.api;

import java.util.List;

import javax.validation.Valid;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import co.com.investment.cryptocurrency.model.CryptoCurrency;
import co.com.investment.cryptocurrency.model.MarketCoin;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@Api(value = "marketcoin", description = "the marketcoin API")
@RequestMapping("/marketcoin")
public interface MarketcoinApi {

    @ApiOperation(value = "adds a cryptocurrency to marketcoin item", nickname = "addCryptoCurrencyToMarketCoin", notes = "Adds a cryptocurrency to marketcoin", tags={ "investor", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Marketcoin created"),
        @ApiResponse(code = 400, message = "invalid input, object invalid"),
        @ApiResponse(code = 409, message = "an existing marketcoin already exists") })
    @RequestMapping(value = "/{idMarketCoin}/addCryptoCurrency",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<CryptoCurrency> addCryptoCurrencyToMarketCoin(@ApiParam(value = "Market coin to add the cryptocurrency",required=true) @PathVariable("idMarketCoin") String idMarketCoin,
    		@ApiParam(value = "Marketcoin to create"  )  @Valid @RequestBody CryptoCurrency cryptoCurrency);


    @ApiOperation(value = "adds an marketcoin item", nickname = "addMarketCoin", notes = "Adds an marketcoin to the system", tags={ "investor", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Marketcoin created"),
        @ApiResponse(code = 400, message = "invalid input, object invalid"),
        @ApiResponse(code = 409, message = "an existing marketcoin already exists") })
    @RequestMapping(value = "/{idMarketCoin}/addMarketCoin",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<MarketCoin> addMarketCoin(@ApiParam(value = "Market coin to add",required=true) @PathVariable("idMarketCoin") String idMarketCoin,
    		@ApiParam(value = "Marketcoin to create",required=true)  @Valid @RequestBody(required=true) MarketCoin marketCoin);


    @ApiOperation(value = "searches a specific currency that the marketcoin offers", nickname = "searchCryptoCurrency", notes = "By passing in the appropriate options, you can search one cryptocurrency on marketcoin ", response = CryptoCurrency.class, responseContainer = "CryptoCurrency", tags={ "investor", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "search results matching criteria", response = CryptoCurrency.class, responseContainer = "CryptoCurrency"),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @RequestMapping(value = "/cryptocurrency/{cryptoCurrencyName}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CryptoCurrency> searchCryptoCurrency(@ApiParam(value = "pass a mandatory cryptocurrency name to find the coin ",required=true) @PathVariable("cryptoCurrencyName") String cryptoCurrencyName);
 

    @ApiOperation(value = "searches all currencies that the marketcoin offers", nickname = "searchCryptoCurrencies", notes = "By passing in the appropriate options, you can search for available  cryptocurrencies on marketcoin ", response = CryptoCurrency.class, responseContainer = "List", tags={ "investor", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "search results matching criteria", response = CryptoCurrency.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @RequestMapping(value = "/{idMarketCoin}/cryptocurrencies",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<CryptoCurrency>> searchCryptoCurrencies(@ApiParam(value = "pass a mandatory search id for looking up the marketcoin brand and his cryptocurrencies",required=true) @PathVariable("idMarketCoin") String idMarketCoin,@Min(0)@ApiParam(value = "number of records to skip for pagination") @Valid @RequestParam(value = "skip", required = false) Integer skip,@Min(0) @Max(50) @ApiParam(value = "maximum number of records to return") @Valid @RequestParam(value = "limit", required = false) Integer limit);


    @ApiOperation(value = "searches an specific marketcoin brand", nickname = "searchMarketCoin", notes = "By passing in the appropriate options, you can search for available marketcoin in the system ", response = MarketCoin.class, responseContainer = "List", tags={ "investor", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "search results matching criteria", response = MarketCoin.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @RequestMapping(value = "/{idMarketCoin}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<MarketCoin> searchMarketCoin(@ApiParam(value = "pass a mandatory search id for looking up the marketcoin brand",required=true) @PathVariable("idMarketCoin") String idMarketCoin);
    
    
    @ApiOperation(value = "searches all marketcoins", nickname = "searchAllMarketCoins", notes = "Return all available marketcoins in the system ", response = MarketCoin.class, responseContainer = "List", tags={ "investor", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "search results matching criteria", response = MarketCoin.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @RequestMapping(value = "/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<MarketCoin>> searchAllMarketCoins();  

}
